### =============================================================================
### SPORTS BETTING API - COMPREHENSIVE TEST SUITE
### =============================================================================
###
### Este archivo contiene pruebas completas para nuestra API de apuestas deportivas.
### Las pruebas están organizadas por funcionalidad y deben ejecutarse en secuencia
### para simular un flujo de usuario real.
###
### INSTRUCCIONES:
### 1. Asegúrate de que la API esté corriendo en http://localhost:5000
### 2. Asegúrate de que PostgreSQL esté corriendo y la base de datos esté migrada
### 3. Ejecuta las pruebas en orden secuencial
### 4. Copia los tokens JWT de las respuestas de login para usarlos en pruebas posteriores
###
### =============================================================================

### Variables globales para las pruebas
### En un entorno real, estas estarían en un archivo de configuración separado
@baseUrl = http://localhost:5000
@contentType = application/json

### Token JWT - Se actualiza después de cada login exitoso
### IMPORTANTE: Copia el token de la respuesta de login y reemplaza aquí
@authToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

### =============================================================================
### SECCIÓN 1: HEALTH CHECK Y CONECTIVIDAD
### =============================================================================
###
### Estas pruebas verifican que la API esté funcionando y responda correctamente.
### Es el equivalente a verificar que el coche encienda antes de probarlo.

### 1.1 Health Check - Verificar que la API esté funcionando
GET {{baseUrl}}/health
Accept: {{contentType}}

### Respuesta esperada:
### {
###   "status": "healthy",
###   "timestamp": "2024-01-01T00:00:00.000Z",
###   "environment": "Development",
###   "version": "1.0.0"
### }

### 1.2 Swagger Documentation - Verificar que la documentación esté disponible
GET {{baseUrl}}/swagger/v1/swagger.json
Accept: {{contentType}}

### =============================================================================
### SECCIÓN 2: AUTENTICACIÓN Y GESTIÓN DE USUARIOS
### =============================================================================
###
### Estas pruebas cubren todo el ciclo de vida de la autenticación:
### registro, login, validación de tokens, y gestión de perfiles.
### Es como probar que el sistema de llaves del coche funcione correctamente.

### 2.1 Registro de Usuario - Caso Exitoso
POST {{baseUrl}}/api/auth/register
Content-Type: {{contentType}}

{
  "email": "testuser@example.com",
  "password": "SecurePassword123!",
  "fullName": "Test User"
}

### Respuesta esperada:
### HTTP 201 Created
### {
###   "success": true,
###   "message": "User registered successfully",
###   "data": {
###     "token": "eyJ...",
###     "email": "testuser@example.com",
###     "fullName": "Test User",
###     "balance": 1000.0,
###     "expiresAt": "...",
###     "message": "Registration successful"
###   }
### }

### 2.2 Registro de Usuario - Email Duplicado (Error Esperado)
POST {{baseUrl}}/api/auth/register
Content-Type: {{contentType}}

{
  "email": "testuser@example.com",
  "password": "AnotherPassword123!",
  "fullName": "Another User"
}

### Respuesta esperada:
### HTTP 409 Conflict
### {
###   "success": false,
###   "error": "ConflictError",
###   "message": "Email already registered"
### }

### 2.3 Registro de Usuario - Validación de Datos (Error Esperado)
POST {{baseUrl}}/api/auth/register
Content-Type: {{contentType}}

{
  "email": "invalid-email",
  "password": "123",
  "fullName": "X"
}

### Respuesta esperada:
### HTTP 400 Bad Request
### {
###   "success": false,
###   "message": "Validation failed",
###   "errors": {
###     "Email": ["Please provide a valid email address"],
###     "Password": ["Password must be at least 6 characters long"],
###     "FullName": ["Full name must be at least 2 characters long"]
###   }
### }

### 2.4 Login de Usuario - Caso Exitoso
### IMPORTANTE: Copia el token de esta respuesta para usarlo en las siguientes pruebas
POST {{baseUrl}}/api/auth/login
Content-Type: {{contentType}}

{
  "email": "testuser@example.com",
  "password": "SecurePassword123!"
}

### Respuesta esperada:
### HTTP 200 OK
### {
###   "success": true,
###   "message": "Login successful",
###   "data": {
###     "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
###     "email": "testuser@example.com",
###     "fullName": "Test User",
###     "balance": 1000.0,
###     "message": "Login successful"
###   }
### }

### 2.5 Login de Usuario - Credenciales Incorrectas (Error Esperado)
POST {{baseUrl}}/api/auth/login
Content-Type: {{contentType}}

{
  "email": "testuser@example.com",
  "password": "WrongPassword"
}

### Respuesta esperada:
### HTTP 401 Unauthorized
### {
###   "success": false,
###   "error": "AuthenticationError",
###   "message": "Invalid email or password"
### }

### 2.6 Validación de Token JWT
POST {{baseUrl}}/api/auth/validate-token
Content-Type: {{contentType}}

{
  "token": "{{authToken}}"
}

### Respuesta esperada:
### HTTP 200 OK
### {
###   "success": true,
###   "message": "Token is valid",
###   "data": {
###     "id": 1,
###     "email": "testuser@example.com",
###     "fullName": "Test User",
###     "balance": 1000.0,
###     "tokenValid": true
###   }
### }

### 2.7 Obtener Perfil de Usuario (Requiere Autenticación)
GET {{baseUrl}}/api/auth/profile
Authorization: Bearer {{authToken}}
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 200 OK
### {
###   "success": true,
###   "message": "Operation successful",
###   "data": {
###     "id": 1,
###     "email": "testuser@example.com",
###     "fullName": "Test User",
###     "balance": 1000.0,
###     "createdAt": "...",
###     "totalBets": 0,
###     "totalBetAmount": 0
###   }
### }

### 2.8 Perfil sin Autenticación (Error Esperado)
GET {{baseUrl}}/api/auth/profile
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 401 Unauthorized

### 2.9 Logout de Usuario
POST {{baseUrl}}/api/auth/logout
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

### =============================================================================
### SECCIÓN 3: GESTIÓN DE EVENTOS DEPORTIVOS
### =============================================================================
###
### Estas pruebas verifican la funcionalidad de eventos: visualización,
### búsqueda, creación, y gestión. Los eventos son el catálogo de productos
### en nuestro sistema de apuestas.

### 3.1 Obtener Todos los Eventos Disponibles (Público)
GET {{baseUrl}}/api/events
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 200 OK
### {
###   "success": true,
###   "message": "Operation successful",
###   "data": [
###     {
###       "id": 1,
###       "name": "Real Madrid vs Barcelona - El Clásico",
###       "teamA": "Real Madrid",
###       "teamB": "Barcelona",
###       "teamAOdds": 2.10,
###       "teamBOdds": 1.95,
###       "eventDate": "2024-01-15T20:00:00Z",
###       "status": "Upcoming",
###       "canPlaceBets": true,
###       "timeUntilEvent": "7 days",
###       "totalBetsAmount": 0,
###       "totalBetsCount": 0
###     }
###   ]
### }

### 3.2 Obtener Evento Específico por ID
GET {{baseUrl}}/api/events/1
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 200 OK con detalles completos del evento

### 3.3 Obtener Evento Inexistente (Error Esperado)
GET {{baseUrl}}/api/events/99999
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 404 Not Found
### {
###   "success": false,
###   "error": "NotFoundError",
###   "message": "Event not found"
### }

### 3.4 Obtener Estadísticas de un Evento
GET {{baseUrl}}/api/events/1/stats
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 200 OK
### {
###   "success": true,
###   "data": {
###     "totalBets": 0,
###     "totalAmountBet": 0,
###     "teamAPercentage": 0,
###     "teamBPercentage": 0,
###     "lastBetDate": "1900-01-01T00:00:00"
###   }
### }

### 3.5 Verificar Disponibilidad de un Evento para Apuestas
GET {{baseUrl}}/api/events/1/availability
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 200 OK
### {
###   "success": true,
###   "data": {
###     "eventId": 1,
###     "isAvailable": true,
###     "message": "Event is available for betting",
###     "checkedAt": "2024-01-01T12:00:00Z"
###   }
### }

### 3.6 Buscar Eventos por Equipo
GET {{baseUrl}}/api/events/search?team=Madrid
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 200 OK con eventos que incluyan "Madrid" en el nombre de algún equipo

### 3.7 Buscar Eventos por Fecha
GET {{baseUrl}}/api/events/search?date=2024-01-15
Accept: {{contentType}}

### 3.8 Buscar Eventos por Estado
GET {{baseUrl}}/api/events/search?status=Upcoming
Accept: {{contentType}}

### 3.9 Crear Nuevo Evento (Requiere Autenticación)
POST {{baseUrl}}/api/events
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "Manchester City vs Liverpool - Premier League",
  "teamA": "Manchester City",
  "teamB": "Liverpool",
  "teamAOdds": 1.85,
  "teamBOdds": 2.05,
  "eventDate": "2024-02-15T15:00:00Z"
}

### Respuesta esperada:
### HTTP 201 Created
### {
###   "success": true,
###   "message": "Operation successful",
###   "data": {
###     "id": 4,
###     "name": "Manchester City vs Liverpool - Premier League",
###     "teamA": "Manchester City",
###     "teamB": "Liverpool",
###     "teamAOdds": 1.85,
###     "teamBOdds": 2.05,
###     "eventDate": "2024-02-15T15:00:00Z",
###     "status": "Upcoming",
###     "canPlaceBets": true
###   }
### }

### 3.10 Crear Evento con Datos Inválidos (Error Esperado)
POST {{baseUrl}}/api/events
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "Test",
  "teamA": "Team A",
  "teamB": "Team A",
  "teamAOdds": 0.5,
  "teamBOdds": 100,
  "eventDate": "2020-01-01T00:00:00Z"
}

### Respuesta esperada:
### HTTP 400 Bad Request con errores de validación

### 3.11 Actualizar Estado de Evento (Requiere Autenticación)
PATCH {{baseUrl}}/api/events/1/status
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "status": "Live",
  "reason": "Event has started"
}

### =============================================================================
### SECCIÓN 4: GESTIÓN DE APUESTAS
### =============================================================================
###
### Esta es la sección más crítica de nuestras pruebas porque maneja
### las transacciones financieras del sistema. Cada prueba debe verificar
### no solo que la funcionalidad trabaje, sino que sea completamente segura.

### 4.1 Previsualizar una Apuesta (Simulación sin Creación)
POST {{baseUrl}}/api/bets/preview
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "eventId": 1,
  "selectedTeam": "Real Madrid",
  "amount": 100.00
}

### Respuesta esperada:
### HTTP 200 OK
### {
###   "success": true,
###   "data": {
###     "isValid": true,
###     "errors": [],
###     "amount": 100.00,
###     "currentOdds": 2.10,
###     "potentialWin": 210.00,
###     "potentialProfit": 110.00,
###     "currentBalance": 1000.00,
###     "balanceAfterBet": 900.00,
###     "eventName": "Real Madrid vs Barcelona - El Clásico",
###     "selectedTeam": "Real Madrid",
###     "message": "Bet preview is valid. You can proceed to create this bet."
###   }
### }

### 4.2 Crear Apuesta Válida
POST {{baseUrl}}/api/bets
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "eventId": 1,
  "selectedTeam": "Real Madrid",
  "amount": 100.00
}

### Respuesta esperada:
### HTTP 201 Created
### {
###   "id": 1,
###   "eventId": 1,
###   "eventName": "Real Madrid vs Barcelona - El Clásico",
###   "selectedTeam": "Real Madrid",
###   "amount": 100.00,
###   "odds": 2.10,
###   "potentialWin": 210.00,
###   "status": "Active",
###   "createdAt": "2024-01-01T12:00:00Z",
###   "eventStatus": "Upcoming",
###   "eventDate": "2024-01-15T20:00:00Z",
###   "canBeCancelled": true,
###   "timeUntilEvent": "7 days"
### }

### 4.3 Crear Segunda Apuesta para Pruebas Adicionales
POST {{baseUrl}}/api/bets
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "eventId": 2,
  "selectedTeam": "Chelsea",
  "amount": 50.00
}

### 4.4 Intentar Apuesta con Balance Insuficiente (Error Esperado)
POST {{baseUrl}}/api/bets
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "eventId": 1,
  "selectedTeam": "Barcelona",
  "amount": 5000.00
}

### Respuesta esperada:
### HTTP 400 Bad Request
### {
###   "success": false,
###   "message": "Bet validation failed",
###   "errors": [
###     "Insufficient balance. Available: $850.00, Required: $5000.00"
###   ],
###   "userBalance": 850.00,
###   "currentOdds": 1.95
### }

### 4.5 Intentar Apuesta en Evento Inexistente (Error Esperado)
POST {{baseUrl}}/api/bets
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "eventId": 99999,
  "selectedTeam": "Team X",
  "amount": 10.00
}

### Respuesta esperada:
### HTTP 400 Bad Request

### 4.6 Intentar Apuesta con Equipo Inválido (Error Esperado)
POST {{baseUrl}}/api/bets
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "eventId": 1,
  "selectedTeam": "Equipo Inexistente",
  "amount": 10.00
}

### Respuesta esperada:
### HTTP 400 Bad Request

### 4.7 Obtener Mis Apuestas
GET {{baseUrl}}/api/bets/my-bets
Authorization: Bearer {{authToken}}
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 200 OK
### {
###   "success": true,
###   "data": [
###     {
###       "id": 1,
###       "eventId": 1,
###       "eventName": "Real Madrid vs Barcelona - El Clásico",
###       "selectedTeam": "Real Madrid",
###       "amount": 100.00,
###       "odds": 2.10,
###       "potentialWin": 210.00,
###       "status": "Active",
###       "createdAt": "2024-01-01T12:00:00Z"
###     }
###   ]
### }

### 4.8 Obtener Mis Apuestas con Filtro por Estado
GET {{baseUrl}}/api/bets/my-bets?status=Active
Authorization: Bearer {{authToken}}
Accept: {{contentType}}

### 4.9 Obtener Mis Apuestas con Filtro por Fecha
GET {{baseUrl}}/api/bets/my-bets?fromDate=2024-01-01&toDate=2024-12-31
Authorization: Bearer {{authToken}}
Accept: {{contentType}}

### 4.10 Obtener Solo Apuestas Activas
GET {{baseUrl}}/api/bets/my-bets?onlyActive=true
Authorization: Bearer {{authToken}}
Accept: {{contentType}}

### 4.11 Obtener Estadísticas de Mis Apuestas
GET {{baseUrl}}/api/bets/my-stats
Authorization: Bearer {{authToken}}
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 200 OK
### {
###   "success": true,
###   "data": {
###     "totalBets": 2,
###     "activeBets": 2,
###     "wonBets": 0,
###     "lostBets": 0,
###     "totalAmountBet": 150.00,
###     "totalWinnings": 0,
###     "currentPotentialWin": 315.00,
###     "winRate": 0,
###     "averageBetAmount": 75.00
###   }
### }

### 4.12 Obtener Apuesta Específica
GET {{baseUrl}}/api/bets/1
Authorization: Bearer {{authToken}}
Accept: {{contentType}}

### 4.13 Intentar Ver Apuesta de Otro Usuario (Error Esperado)
### Nota: Esta prueba funcionaría si existiera una apuesta con ID muy alto
### que perteneciera a otro usuario
GET {{baseUrl}}/api/bets/99999
Authorization: Bearer {{authToken}}
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 404 Not Found

### 4.14 Obtener Historial de Apuestas con Paginación
GET {{baseUrl}}/api/bets/history?page=1&pageSize=10&sortBy=CreatedAt&sortDescending=true
Authorization: Bearer {{authToken}}
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 200 OK
### {
###   "success": true,
###   "data": {
###     "data": [...],
###     "pagination": {
###       "currentPage": 1,
###       "pageSize": 10,
###       "totalItems": 2,
###       "totalPages": 1,
###       "hasPreviousPage": false,
###       "hasNextPage": false
###     },
###     "sorting": {
###       "sortBy": "CreatedAt",
###       "sortDescending": true
###     }
###   }
### }

### 4.15 Cancelar una Apuesta
DELETE {{baseUrl}}/api/bets/1
Authorization: Bearer {{authToken}}

### Respuesta esperada:
### HTTP 200 OK
### {
###   "success": true,
###   "data": {
###     "betId": 1,
###     "status": "Cancelled",
###     "cancelledAt": "2024-01-01T12:30:00Z",
###     "message": "Bet has been successfully cancelled and amount refunded"
###   }
### }

### 4.16 Intentar Cancelar Apuesta Ya Cancelada (Error Esperado)
DELETE {{baseUrl}}/api/bets/1
Authorization: Bearer {{authToken}}

### Respuesta esperada:
### HTTP 400 Bad Request

### =============================================================================
### SECCIÓN 5: PRUEBAS DE SEGURIDAD Y AUTORIZACIÓN
### =============================================================================
###
### Estas pruebas verifican que nuestro sistema de seguridad funcione correctamente
### y que usuarios no autorizados no puedan acceder a recursos protegidos.

### 5.1 Intentar Crear Apuesta sin Token (Error Esperado)
POST {{baseUrl}}/api/bets
Content-Type: {{contentType}}

{
  "eventId": 1,
  "selectedTeam": "Real Madrid",
  "amount": 100.00
}

### Respuesta esperada:
### HTTP 401 Unauthorized

### 5.2 Intentar Acceder a Perfil sin Token (Error Esperado)
GET {{baseUrl}}/api/auth/profile
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 401 Unauthorized

### 5.3 Usar Token Inválido (Error Esperado)
GET {{baseUrl}}/api/auth/profile
Authorization: Bearer invalid_token_here
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 401 Unauthorized

### 5.4 Usar Token Expirado (Error Esperado)
### Nota: Esta prueba requeriría un token que haya expirado
GET {{baseUrl}}/api/auth/profile
Authorization: Bearer expired_token_here
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 401 Unauthorized

### =============================================================================
### SECCIÓN 6: PRUEBAS DE ESTRÉS Y LÍMITES
### =============================================================================
###
### Estas pruebas verifican que el sistema maneje correctamente casos extremos
### y datos en los límites de lo permitido.

### 6.1 Apuesta con Monto Mínimo
POST {{baseUrl}}/api/bets
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "eventId": 2,
  "selectedTeam": "Manchester United",
  "amount": 1.00
}

### 6.2 Intentar Apuesta con Monto por Debajo del Mínimo (Error Esperado)
POST {{baseUrl}}/api/bets
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "eventId": 2,
  "selectedTeam": "Manchester United",
  "amount": 0.50
}

### Respuesta esperada:
### HTTP 400 Bad Request

### 6.3 Intentar Apuesta con Monto por Encima del Máximo (Error Esperado)
POST {{baseUrl}}/api/bets
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "eventId": 2,
  "selectedTeam": "Manchester United",
  "amount": 15000.00
}

### Respuesta esperada:
### HTTP 400 Bad Request

### 6.4 Registro con Email Extremadamente Largo (Error Esperado)
POST {{baseUrl}}/api/auth/register
Content-Type: {{contentType}}

{
  "email": "this_is_a_very_very_very_very_very_very_very_very_very_very_long_email_address_that_should_exceed_normal_limits@example.com",
  "password": "ValidPassword123!",
  "fullName": "Test User"
}

### 6.5 Búsqueda de Eventos con Parámetros Extremos
GET {{baseUrl}}/api/events/search?team=EquipoQueDefinitivamenteNoExisteEnNingunLugarDelMundo
Accept: {{contentType}}

### Respuesta esperada:
### HTTP 200 OK con array vacío

### =============================================================================
### SECCIÓN 7: PRUEBAS DE RENDIMIENTO BÁSICAS
### =============================================================================
###
### Estas pruebas verifican que el sistema responda en tiempos razonables
### bajo cargas normales.

### 7.1 Obtener Eventos (Medir Tiempo de Respuesta)
GET {{baseUrl}}/api/events
Accept: {{contentType}}

### Expectativa: Respuesta en menos de 500ms

### 7.2 Login de Usuario (Medir Tiempo de Respuesta)
POST {{baseUrl}}/api/auth/login
Content-Type: {{contentType}}

{
  "email": "testuser@example.com",
  "password": "SecurePassword123!"
}

### Expectativa: Respuesta en menos de 1000ms (debido al hashing de BCrypt)

### 7.3 Crear Apuesta (Medir Tiempo de Respuesta)
POST {{baseUrl}}/api/bets
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "eventId": 3,
  "selectedTeam": "Liverpool",
  "amount": 25.00
}

### Expectativa: Respuesta en menos de 500ms

### =============================================================================
### NOTAS IMPORTANTES PARA LAS PRUEBAS
### =============================================================================
###
### 1. ORDEN DE EJECUCIÓN:
###    - Ejecuta las pruebas en el orden presentado
###    - Algunas pruebas dependen de datos creados en pruebas anteriores
###    - Los tokens JWT expiran, así que recréalos si es necesario
###
### 2. MANEJO DE TOKENS:
###    - Copia el token de la respuesta de login exitoso
###    - Reemplaza {{authToken}} con el token real
###    - Los tokens son válidos por 7 días por defecto
###
### 3. DATOS DE PRUEBA:
###    - El sistema incluye eventos de ejemplo (seed data)
###    - Cada usuario comienza con $1000 de balance
###    - Las apuestas modifican el balance en tiempo real
###
### 4. RESETEAR ESTADO:
###    - Para empezar de cero, reinicia la aplicación
###    - Las migraciones recrearán la base de datos con datos frescos
###    - O ejecuta las migraciones manualmente: dotnet ef database update
###
### 5. LOGGING Y DEBUGGING:
###    - Revisa los logs de la aplicación para detalles de errores
###    - Los logs incluyen información detallada de cada operación
###    - Nivel de log en desarrollo: Information y superior
###
### =============================================================================
