services:
  
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER_NAME:-sportsbetting_postgres_prod}
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sportsbetting_prod}  
      POSTGRES_USER: postgres

      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    
    # secrets:
    #   - source: db_password
    #     target: /run/secrets/postgres_password
    #     uid: '999'
    #     gid: '999'
    #     mode: 0600
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    networks:
      - sportsbetting_backend
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sportsbetting_user} -d ${POSTGRES_DB:-sportsbetting_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    
    # command: >
    #   postgres
    #   -c config_file=/etc/postgresql/postgresql.conf
    #   -c ssl=on
    #   -c ssl_cert_file=/var/lib/postgresql/ssl/server.crt
    #   -c ssl_key_file=/var/lib/postgresql/ssl/server.key

  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    
    container_name: sportsbetting_api_prod
    restart: unless-stopped
    
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5000
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      - DB_HOST=postgres
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}  
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=sportsbetting_prod;Username=postgres;Password=SportsBetting2024!;SSL Mode=Disable
      - JwtSettings__SecretKey=${JWT_SECRET}
      - JwtSettings__Issuer=${JWT_ISSUER:-SportsBettingAPI}
      - JwtSettings__Audience=${JWT_AUDIENCE:-SportsBettingClients}
      - JwtSettings__TokenExpirationDays=${JWT_EXPIRATION_DAYS:-1}
      - UserSettings__InitialBalance=${INITIAL_BALANCE:-1000.00}
      - ApiSettings__MinBetAmount=${MIN_BET_AMOUNT:-1.00}
      - ApiSettings__MaxBetAmount=${MAX_BET_AMOUNT:-10000.00}
      - Logging__LogLevel__Default=Warning
      - Logging__LogLevel__Microsoft=Error
      - Logging__LogLevel__System=Error
      - Logging__LogLevel__Microsoft.EntityFrameworkCore=Warning
      - DOTNET_RUNNING_IN_CONTAINER=true
      - DOTNET_GCServer=true
      - DOTNET_GCConcurrent=true
    
    # secrets:
    #   - jwt_secret
    #   - source: db_connection
    #     target: /run/secrets/db_connection
    
    
    networks:
      - sportsbetting_backend
    
    depends_on:
      postgres:
        condition: service_healthy
    
    volumes:
      - app_logs:/app/logs
      - app_temp:/app/temp
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # deploy:
    #   replicas: 2
    #   resources:
    #     limits:
    #       memory: 1G
    #       cpus: '1.0'
    #     reservations:
    #       memory: 512M
    #       cpus: '0.5'
    #   restart_policy:
    #     condition: on-failure
    #     delay: 5s
    #     max_attempts: 3
    #     window: 120s
    #   update_config:
    #     parallelism: 1
    #     delay: 10s
    #     failure_action: rollback
    #     order: start-first

  nginx:
    image: nginx:1.25-alpine
    container_name: ${PROXY_CONTAINER_NAME:-sportsbetting_nginx_prod}
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    
    networks:
      - sportsbetting_frontend
      - sportsbetting_backend
    
    depends_on:
      - api
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: ${REDIS_CONTAINER_NAME:-sportsbetting_redis_prod}
    restart: unless-stopped
    
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    
    volumes:
      - redis_data:/data
    
    networks:
      - sportsbetting_backend
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  db_backup:
    image: postgres:15-alpine
    container_name: ${BACKUP_CONTAINER_NAME:-sportsbetting_backup_prod}
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sportsbetting_prod}
      POSTGRES_USER: ${POSTGRES_USER:-sportsbetting_user}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-"0 2 * * *"}  # Daily at 2 AM
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    
    # secrets:
    #   - source: db_password
    #     target: /run/secrets/postgres_password
    #     uid: '999'
    #     gid: '999'
    #     mode: 0600
    
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup.sh:/scripts/backup.sh:ro
    
    networks:
      - sportsbetting_backend
    
    depends_on:
      postgres:
        condition: service_healthy
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    command: >
      sh -c "
      apk add --no-cache dcron &&
      echo '${BACKUP_SCHEDULE} /scripts/backup.sh' | crontab - &&
      crond -f -l 2
      "

networks:
  sportsbetting_frontend:
    driver: bridge
    name: ${FRONTEND_NETWORK_NAME:-sportsbetting_frontend_prod}
    driver_opts:
      com.docker.network.bridge.name: sb-frontend
    
  sportsbetting_backend:
    driver: bridge
    name: ${BACKEND_NETWORK_NAME:-sportsbetting_backend_prod}
    internal: true  
    driver_opts:
      com.docker.network.bridge.name: sb-backend

volumes:
  postgres_data:
    driver: local
    name: ${POSTGRES_VOLUME_NAME:-sportsbetting_postgres_data_prod}
  
  postgres_backups:
    driver: local
    name: ${POSTGRES_BACKUP_VOLUME:-sportsbetting_postgres_backups_prod}
  
  redis_data:
    driver: local
    name: ${REDIS_VOLUME_NAME:-sportsbetting_redis_data_prod}
  
  app_logs:
    driver: local
    name: ${APP_LOGS_VOLUME:-sportsbetting_app_logs_prod}
  
  app_temp:
    driver: local
    name: ${APP_TEMP_VOLUME:-sportsbetting_app_temp_prod}

# secrets:
#   db_password:
#     external: true
#     name: sportsbetting_db_password
#   
#   jwt_secret:
#     external: true
#     name: sportsbetting_jwt_secret
#   
#   db_connection:
#     external: true
#     name: sportsbetting_db_connection
