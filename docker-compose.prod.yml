
# =============================================================================
# SPORTS BETTING API - DOCKER COMPOSE PRODUCTION
# =============================================================================
# Production-ready configuration with security and performance optimizations
# 
# Prerequisites:
# 1. Create secrets: docker secret create db_password /path/to/db_password.txt
# 2. Create secrets: docker secret create jwt_secret /path/to/jwt_secret.txt
# 3. Ensure SSL certificates are available in ./ssl/ directory
# 4. Review and update all environment variables
# =============================================================================

services:
  # =============================================================================
  # PostgreSQL Database Service
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER_NAME:-sportsbetting_postgres_prod}
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sportsbetting_prod}
      POSTGRES_USER: ${POSTGRES_USER:-sportsbetting_user}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # SSL Configuration
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_SSL_MODE: require
    
    secrets:
      - source: db_password
        target: /run/secrets/postgres_password
        uid: '999'
        gid: '999'
        mode: 0600
    
    # NO EXPOSED PORTS - Database should only be accessible internally
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./scripts/init-db-prod.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./postgres/ssl:/var/lib/postgresql/ssl:ro
      - ./postgres/conf/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    
    networks:
      - sportsbetting_backend
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sportsbetting_user} -d ${POSTGRES_DB:-sportsbetting_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/ssl/server.crt
      -c ssl_key_file=/var/lib/postgresql/ssl/server.key

  # =============================================================================
  # Sports Betting API Service
  # =============================================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    
    restart: unless-stopped
    
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5000
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      - ConnectionStrings__DefaultConnection=${DATABASE_URL}
      - JwtSettings__Issuer=${JWT_ISSUER:-SportsBettingAPI}
      - JwtSettings__Audience=${JWT_AUDIENCE:-SportsBettingClients}
      - JwtSettings__TokenExpirationDays=${JWT_EXPIRATION_DAYS:-1}
      - UserSettings__InitialBalance=${INITIAL_BALANCE:-1000.00}
      - UserSettings__MinBetAmount=${MIN_BET_AMOUNT:-1.00}
      - UserSettings__MaxBetAmount=${MAX_BET_AMOUNT:-10000.00}
      - Logging__LogLevel__Default=Warning
      - Logging__LogLevel__Microsoft=Error
      - Logging__LogLevel__System=Error
      - Logging__LogLevel__Microsoft.EntityFrameworkCore=Warning
      - DOTNET_RUNNING_IN_CONTAINER=true
      - DOTNET_GCServer=true
      - DOTNET_GCConcurrent=true
    
    secrets:
      - jwt_secret
      - source: db_connection
        target: /run/secrets/db_connection
    
    # NO EXPOSED PORTS - API should only be accessible through reverse proxy
    
    networks:
      - sportsbetting_backend
    
    depends_on:
      postgres:
        condition: service_healthy
    
    volumes:
      - app_logs:/app/logs
      - app_temp:/app/temp
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first


  # =============================================================================
  # Reverse Proxy & Load Balancer (Nginx)
  # =============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: ${PROXY_CONTAINER_NAME:-sportsbetting_nginx_prod}
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    
    networks:
      - sportsbetting_frontend
      - sportsbetting_backend
    
    depends_on:
      - api
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # =============================================================================
  # Redis Cache (Production with authentication)
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: ${REDIS_CONTAINER_NAME:-sportsbetting_redis_prod}
    restart: unless-stopped
    
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    
    # NO EXPOSED PORTS - Redis should only be accessible internally
    
    volumes:
      - redis_data:/data
    
    networks:
      - sportsbetting_backend
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Database Backup Service
  # =============================================================================
  db_backup:
    image: postgres:15-alpine
    container_name: ${BACKUP_CONTAINER_NAME:-sportsbetting_backup_prod}
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sportsbetting_prod}
      POSTGRES_USER: ${POSTGRES_USER:-sportsbetting_user}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-"0 2 * * *"}  # Daily at 2 AM
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
    
    secrets:
      - source: db_password
        target: /run/secrets/postgres_password
        uid: '999'
        gid: '999'
        mode: 0600
    
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup.sh:/scripts/backup.sh:ro
    
    networks:
      - sportsbetting_backend
    
    depends_on:
      postgres:
        condition: service_healthy
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    command: >
      sh -c "
      apk add --no-cache dcron &&
      echo '${BACKUP_SCHEDULE} /scripts/backup.sh' | crontab - &&
      crond -f -l 2
      "

# =============================================================================
# MONITORING SERVICES (Optional - uncomment for advanced monitoring)
# =============================================================================
#  prometheus:
#    image: prom/prometheus:latest
#    container_name: sportsbetting_prometheus_prod
#    restart: unless-stopped
#    profiles: [monitoring]
#    # ... configuration
#
#  grafana:
#    image: grafana/grafana:latest
#    container_name: sportsbetting_grafana_prod  
#    restart: unless-stopped
#    profiles: [monitoring]
#    # ... configuration

# =============================================================================
# Networks
# =============================================================================
networks:
  sportsbetting_frontend:
    driver: bridge
    name: ${FRONTEND_NETWORK_NAME:-sportsbetting_frontend_prod}
    driver_opts:
      com.docker.network.bridge.name: sb-frontend
    
  sportsbetting_backend:
    driver: bridge
    name: ${BACKEND_NETWORK_NAME:-sportsbetting_backend_prod}
    internal: true  # Backend network is isolated from external access
    driver_opts:
      com.docker.network.bridge.name: sb-backend

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
    name: ${POSTGRES_VOLUME_NAME:-sportsbetting_postgres_data_prod}
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_PATH:-/opt/sportsbetting/data/postgres}
  
  postgres_backups:
    driver: local
    name: ${POSTGRES_BACKUP_VOLUME:-sportsbetting_postgres_backups_prod}
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_BACKUP_PATH:-/opt/sportsbetting/backups}
  
  redis_data:
    driver: local
    name: ${REDIS_VOLUME_NAME:-sportsbetting_redis_data_prod}
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_DATA_PATH:-/opt/sportsbetting/data/redis}
  
  app_logs:
    driver: local
    name: ${APP_LOGS_VOLUME:-sportsbetting_app_logs_prod}
    driver_opts:
      type: none
      o: bind
      device: ${APP_LOGS_PATH:-/opt/sportsbetting/logs}
  
  app_temp:
    driver: local
    name: ${APP_TEMP_VOLUME:-sportsbetting_app_temp_prod}
    driver_opts:
      type: none
      o: bind
      device: ${APP_TEMP_PATH:-/opt/sportsbetting/temp}

# =============================================================================
# Secrets
# =============================================================================
secrets:
  db_password:
    external: true
    name: sportsbetting_db_password
  
  jwt_secret:
    external: true
    name: sportsbetting_jwt_secret
  
  db_connection:
    external: true
    name: sportsbetting_db_connection
